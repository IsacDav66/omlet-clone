// client-app/host.js
const net = require('net');
const axios = require('axios');
const os = require('os');

const BACKEND_URL = 'http://localhost:3000';
const HOST_PORT = 5000; // Puerto que el host abrirá para los jugadores

// Función para obtener nuestra IP local (para que otros en la misma red nos encuentren)
function getLocalIp() {
  const interfaces = os.networkInterfaces();
  for (const name of Object.keys(interfaces)) {
    for (const iface of interfaces[name]) {
      const { address, family, internal } = iface;
      if (family === 'IPv4' && !internal) {
        return address;
      }
    }
  }
  return '127.0.0.1'; // Fallback
}

// 1. Crear el servidor TCP que esperará jugadores
const server = net.createServer(socket => {
  const remoteAddress = `${socket.remoteAddress}:${socket.remotePort}`;
  console.log(`[Host] ¡Nuevo jugador conectado desde ${remoteAddress}!`);

  // Cuando el jugador envía datos, los mostramos
  socket.on('data', data => {
    console.log(`[Host] Recibido del jugador: "${data.toString().trim()}"`);
    // En Fase 2, aquí reenviaríamos estos datos a los otros jugadores
  });

  socket.on('close', () => {
    console.log(`[Host] Jugador ${remoteAddress} se ha desconectado.`);
  });

  socket.on('error', (err) => {
    console.error(`[Host] Error de conexión: ${err.message}`);
  });
});

// 2. Iniciar el servidor y registrar la sala en el backend
server.listen(HOST_PORT, async () => {
  const hostIp = getLocalIp();
  console.log(`[Host] Servidor TCP activo. Escuchando en ${hostIp}:${HOST_PORT}`);

  try {
    console.log('[Host] Registrando sala en el backend...');
    const response = await axios.post(`${BACKEND_URL}/sala/create`, {
      hostIp,
      hostPort: HOST_PORT
    });
    const { salaId } = response.data;
    console.log(`✅ [Host] ¡Sala registrada con éxito! ID de la sala: ${salaId}`);
    console.log('[Host] Esperando jugadores...');
  } catch (error) {
    console.error('[Host] Error al registrar la sala:', error.response ? error.response.data : error.message);
    process.exit(1); // Si no se puede registrar, cerramos
  }
});