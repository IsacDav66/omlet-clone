// client-app/player_udp.js
const dgram = require('dgram');
const axios = require('axios');

const BACKEND_URL = 'http://localhost:3000';
const client = dgram.createSocket('udp4');
let messageCounter = 0;

async function joinRoom(salaId) {
    if (!salaId) {
        console.error('Por favor, proporciona un ID de sala. Uso: node player_udp.js <salaId>');
        return;
    }

    try {
        console.log(`[Player-UDP] Pidiendo unirse a la sala ${salaId}...`);
        const response = await axios.post(`${BACKEND_URL}/sala/join`, {
            salaId,
            playerIp: 'mi.ip.de.jugador'
        });

        const { hostIp, hostPort } = response.data;
        console.log(`✅ [Player-UDP] Datos del host recibidos: ${hostIp}:${hostPort}.`);

        // Escuchar mensajes entrantes (reenviados por el host)
        client.on('message', (msg, rinfo) => {
            console.log(`[Player-UDP] Mensaje recibido del host (${rinfo.address}:${rinfo.port}): "${msg.toString()}"`);
        });

        // Enviar un mensaje al host cada 3 segundos para mantener la conexión "viva"
        setInterval(() => {
            messageCounter++;
            const message = Buffer.from(`Hola host, soy un jugador (msg ${messageCounter})`);
            console.log(`-> Enviando mensaje al host...`);
            client.send(message, hostPort, hostIp, (err) => {
                if (err) console.error('[Player-UDP] Error al enviar mensaje:', err);
            });
        }, 3000);

    } catch (error) {
        console.error('[Player-UDP] Error al unirse a la sala:', error.response ? error.response.data.error : error.message);
    }
}

const salaId = process.argv[2];
joinRoom(salaId);