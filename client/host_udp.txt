// client-app/host_udp.js
const dgram = require('dgram');
const axios = require('axios');
const os =require('os');

const BACKEND_URL = 'http://localhost:3000';
const HOST_PORT = 5001; // Usamos un puerto diferente para no confundir

const server = dgram.createSocket('udp4');
const players = new Map(); // Guardaremos a los jugadores aquí (key: "ip:port", value: {ip, port})

function getLocalIp() {
    // (Misma función que antes)
    const interfaces = os.networkInterfaces();
    for (const name of Object.keys(interfaces)) {
        for (const iface of interfaces[name]) {
            if (iface.family === 'IPv4' && !iface.internal) return iface.address;
        }
    }
    return '127.0.0.1';
}

server.on('error', (err) => {
    console.log(`[Host-UDP] Error del servidor:\n${err.stack}`);
    server.close();
});

server.on('message', (msg, rinfo) => {
    const playerKey = `${rinfo.address}:${rinfo.port}`;

    // Si es la primera vez que vemos a este jugador, lo saludamos y guardamos
    if (!players.has(playerKey)) {
        console.log(`[Host-UDP] ¡Nuevo jugador conectado desde ${playerKey}!`);
        players.set(playerKey, { address: rinfo.address, port: rinfo.port });
    }
    
    console.log(`[Host-UDP] Recibido de ${playerKey}: "${msg.toString()}"`);

    // Reenviar el mensaje a TODOS los otros jugadores
    players.forEach((player, key) => {
        if (key !== playerKey) {
            console.log(`       -> Reenviando a ${key}`);
            server.send(msg, player.port, player.address, (err) => {
                if(err) console.error(`Error al reenviar a ${key}:`, err);
            });
        }
    });
});

server.on('listening', async () => {
    const address = server.address();
    const hostIp = getLocalIp();
    console.log(`[Host-UDP] Servidor UDP activo. Escuchando en ${hostIp}:${address.port}`);

    try {
        console.log('[Host-UDP] Registrando sala en el backend...');
        const response = await axios.post(`${BACKEND_URL}/sala/create`, {
            hostIp: hostIp,
            hostPort: address.port
        });
        const { salaId } = response.data;
        console.log(`✅ [Host-UDP] ¡Sala registrada con éxito! ID de la sala: ${salaId}`);
        console.log('[Host-UDP] Esperando jugadores...');
    } catch (error) {
        console.error('[Host-UDP] Error al registrar la sala:', error.response ? error.response.data : error.message);
        process.exit(1);
    }
});

server.bind(HOST_PORT);