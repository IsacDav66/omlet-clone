// client-app/host_tap.js
const dgram = require('dgram');
const axios = require('axios');
const os = require('os');
const { Tap } = require('tuntap'); // <-- CAMBIO AQUÍ

const BACKEND_URL = 'http://localhost:3000';
const HOST_UDP_PORT = 5001;
const MTU = 1500;

const VIRTUAL_NETWORK = '10.80.0.0';
const VIRTUAL_NETMASK = '255.255.255.0';
const HOST_VIRTUAL_IP = '10.80.0.1';

const udpServer = dgram.createSocket('udp4');
const players = new Map();

// Usamos new Tap() directamente
const tap = new Tap({ // <-- CAMBIO AQUÍ (usamos Tap, no Tun)
    name: 'omlet-tap0',
    ip: HOST_VIRTUAL_IP,
    netmask: VIRTUAL_NETMASK,
    mtu: MTU,
});

tap.on('data', (buffer) => {
    console.log(`[TAP -> UDP] Paquete de ${buffer.length} bytes recibido del juego. Reenviando a ${players.size} jugador(es).`);
    players.forEach((player, key) => {
        udpServer.send(buffer, player.port, player.address, (err) => {
            if (err) console.error(`[Host] Error al reenviar paquete a ${key}:`, err);
        });
    });
});

udpServer.on('message', (buffer, rinfo) => {
    const playerKey = `${rinfo.address}:${rinfo.port}`;
    if (!players.has(playerKey)) {
        console.log(`[UDP -> TAP] Nuevo jugador conectado: ${playerKey}`);
        players.set(playerKey, { address: rinfo.address, port: rinfo.port });
    }
    
    console.log(`[UDP -> TAP] Paquete de ${buffer.length} bytes recibido de ${playerKey}. Inyectando en TAP.`);
    tap.write(buffer);
});

udpServer.on('listening', async () => {
    tap.up();
    console.log(`[TAP] Interfaz virtual '${tap.name}' creada con IP ${HOST_VIRTUAL_IP}`);

    const address = udpServer.address();
    const hostIp = getLocalIp();
    console.log(`[Host-TAP] Servidor UDP activo en ${hostIp}:${address.port}`);

    try {
        const response = await axios.post(`${BACKEND_URL}/sala/create`, {
            hostIp,
            hostPort: address.port
        });
        const { salaId } = response.data;
        console.log(`✅ [Host-TAP] Sala registrada con éxito! ID: ${salaId}`);
        console.log('--- Host listo. Ahora, abre un juego y ponlo en modo LAN. ---');
    } catch (error) {
        console.error('[Host-TAP] Error al registrar la sala:', error.message);
        process.exit(1);
    }
});

function getLocalIp() {
    const interfaces = os.networkInterfaces();
    for (const name of Object.keys(interfaces)) {
        for (const iface of interfaces[name]) {
            if (iface.family === 'IPv4' && !iface.internal) {
                return iface.address;
            }
        }
    }
    return '127.0.0.1';
}

udpServer.bind(HOST_UDP_PORT);

process.on('SIGINT', () => {
    console.log('\nCerrando host...');
    tap.down();
    udpServer.close();
    process.exit();
});